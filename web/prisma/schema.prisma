generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  name            String   @db.VarChar(60)
  github_username String
  email           String
  avatar_url      String?
  createdAt       DateTime @default(now())

  teamUsers TeamUser[]
}

model Team {
  id        String   @id @default(uuid())
  slug      String   @unique
  name      String
  createdAt DateTime @default(now())

  projects  Project[]
  teamUsers TeamUser[]
}

model Project {
  id        String   @id @default(uuid())
  teamSlug  String
  slug      String
  name      String
  createdAt DateTime @default(now())

  url                 String
  allowed_hosts       String
  track_page_visitors Boolean @default(true)
  public_statistics   Boolean @default(false)

  team Team @relation(fields: [teamSlug], references: [slug], onDelete: Cascade)

  pageViews    PageView[]
  pageVisitors PageVisitor[]

  @@unique([teamSlug, slug])
}

model TeamUser {
  userId String
  teamId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@id([userId, teamId])
}

model PageView {
  projectId String
  date      DateTime @db.Date
  hour      Int
  pathname  String

  count         Int
  mobile_count  Int
  tablet_count  Int
  dekstop_count Int

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, date, hour, pathname])
}

model PageVisitor {
  projectId      String
  date           DateTime @db.Date
  hashed_user_id String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@id([projectId, date, hashed_user_id])
}
